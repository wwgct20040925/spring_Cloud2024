server:
  port: 8000
spring:
  application:
    name: cloud-consumer-feign-order
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: ${spring.application.name}
    openfeign:
      client:
        config:
          default:
            #连接超时时间
            connectTimeout: 20000
            #读取超时时间
            readTimeout: 20000
          cloud-payment-service:
            connectTimeout: 20000  # 连接超时时间，单位为毫秒，默认为 5000 毫秒
            readTimeout:    20000  # 读取超时时间，单位为毫秒，默认为 10000 毫秒
      httpclient:
        hc5:
          enabled: true           #Apache HttpClient5 配置开启
      compression:
        request:
          enabled: true
          min-request-size: 2048 #最小触发压缩的大小
          mime-types: text/xml,application/xml,application/json #触发压缩数据类型
        response:
          enabled: true
      circuitbreaker:  # 开启circuitbreaker和分组激活 spring.cloud.openfeign.circuitbreaker.enabled
        enabled: true
        group:
          enabled: true #没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后
logging:
  level:
    com:
      gct:
        api:
          PayFeignApi: debug
#




#基于次数窗口的服务熔断加服务降级
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50      #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        sliding-window-type: TIME_BASED # 滑动窗口的类型
#        slow-call-duration-threshold:   #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
#          seconds: 2
#        slow-call-rate-threshold: 30    #慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
#        sliding-window-size: 6          #滑动窗口的大小配置，配置TIME_BASED表示6秒
#        minimum-number-of-calls: 2      #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
#        wait-duration-in-open-state:    #从OPEN到HALF_OPEN状态需要等待的时间
#          seconds: 5
#        permitted-number-of-calls-in-half-open-state: 2   #半开状态允许的最大请求数，默认值为10
#        record-exceptions:              #记录为失败并因此增加失败率的异常列表。
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

#基于时间窗口的服务熔断加服务降级
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s    #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
#        slowCallRateThreshold: 30 #慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
#        slidingWindowType: TIME_BASED # 滑动窗口的类型
#        slidingWindowSize: 2 #滑动窗口的大小配置，配置TIME_BASED表示2秒
#        minimumNumberOfCalls: 2 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
#        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。
#        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

#信号量舱壁隔离
resilience4j:
  bulkhead:
    configs:
      default:
        max-concurrent-calls: 2 # 隔离允许并发线程执行的最大数量
        max-wait-duration:
          seconds: 1    # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底fallback
    instances:
      cloud-payment-service:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeout-duration: 10s  #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑



#线程舱壁隔离
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s
#  thread-pool-bulkhead:
#    configs:
#      default:
#        max-thread-pool-size: 1   #配置最大线程池大小
#        core-thread-pool-size: 1   #配置核心线程池大小
#        queue-capacity: 1        #配置队列的容量
##       keepAliveDuration       #当线程数大于核心线程，多于线程愿意等待的时间
#    instances:
#      cloud-payment-service:
#        baseConfig: default


##resilience4j ratelimiter 限流的例子
#resilience4j:
#  ratelimiter:
#    configs:
#      default:
#        limitForPeriod: 2 #在一次刷新周期内，允许执行的最大请求数
#        limitRefreshPeriod: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
#        timeout-duration: 1 # 线程等待权限的默认等待时间
#    instances:
#      cloud-payment-service:
#        baseConfig: default
